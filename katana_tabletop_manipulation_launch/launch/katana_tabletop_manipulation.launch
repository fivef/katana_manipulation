<launch>
  <!-- set stereo to true for narrow stereo, false for kinect -->
  <arg name="stereo" default="false" />
  <arg name="use_slip_controllers" default="false"/>
  <arg name="use_right_arm" default="true"/>
  <arg name="use_left_arm" default="true"/>
  <arg name="use_task_cartesian" default="false"/>
  <arg name="log_to_warehouse" default="false"/>
  <arg name="flatten_table" default="false"/>
  <arg name="kinect_frame_prefix" default="/kinect_rgb_optical_frame" />
  <arg name="kinect_camera_name" default="kinect" />
  <arg name="sim" default="false"/>

  <!-- Use the remote database client; this won't work and produce the following error:

           Could not retrieve list of models from database (/tabletop_object_recognition)

       That only means that CAD models won't be available; grasping unknown
       objects (just represented by a point cloud) still works.  -->
  <!-- client for object database running on remote server at Willow Garage -->
  <!-- DOES NOT WORK IN TRUNK RIGHT NOW -->
  <!--
  <include file="$(find household_objects_database)/launch/objects_database_remote_client.launch"/>
  -->

  <!-- alternative option: database server running on a local machine -->
  <rosparam command="load" file="$(find household_objects_database)/config/wgs36.yaml"/>
  <node pkg="household_objects_database" name="objects_database_node" type="objects_database_node"
    respawn="true" output="screen"/>  -->

  <!-- manipulation prerequisites -->
  <include file="$(find katana_object_manipulation_launch)/launch/katana_manipulation_prerequisites.launch">
    <arg name="log_to_warehouse" value="$(arg log_to_warehouse)"/>
    <arg name="kinect_frame_prefix" value="$(arg kinect_frame_prefix)"/>
    <arg name="kinect_camera_name" value="$(arg kinect_camera_name)"/>
  </include>

  <!-- manipulation -->
  <include file="$(find katana_object_manipulation_launch)/launch/katana_manipulation.launch" />

  <!-- tabletop collision map processing -->
  <node pkg="tabletop_collision_map_processing" name="tabletop_collision_map_processing"
    type="tabletop_collision_map_processing_node" respawn="false" output="screen" />
  <param name="tabletop_collision_map_processing/get_model_mesh_srv"
    value="/objects_database_node/get_model_mesh" />
  <param name="tabletop_collision_map_processing/static_map_cloud_name" value="/kinect/depth_registered/points_filtered"/>

  <!-- tabletop segmentation and object recognition -->
  <include file="$(find tabletop_object_detector)/launch/tabletop_complete.launch">
    <arg unless="$(arg stereo)" name="tabletop_segmentation_points_input" value="$(arg kinect_camera_name)/depth_registered/points_filtered"/>
    <arg if="$(arg stereo)" name="tabletop_segmentation_points_input" value="narrow_stereo_textured/points2"/>
    <arg name="flatten_table" value="$(arg flatten_table)"/>
  </include>

  <!-- modify some parameters set inside the tabletop_complete.launch (or better, the tabletop_segmentation.launch) file above -->
  <!-- minimum number of points per cluster; since we use the (downsampled) self-filtered point cloud, we set this lower than default (300) -->
  <param name="tabletop_segmentation/min_cluster_size" value="50" />
  <!-- this has to be the same frame as the `desired_frame` in the request to tabletop_collision_map_processing -->
  <param name="tabletop_segmentation/processing_frame" value="base_footprint" />
  <!-- if not using the self-filtered point cloud, these limits have to be set so that they exclude all parts of the robot -->
  <param name="tabletop_segmentation/x_filter_min" value="0.25" />
  <param name="tabletop_segmentation/z_filter_min" value="0.10" />
  <!-- warning: these values have to be *positive*, if the table is below the processing_frame (e.g. min = 0.01, max = 0.50), else *negative* (min = -0.50, max = -0.01) -->
  <!-- <param name="tabletop_segmentation/table_z_filter_min" value="-0.50" />
  <param name="tabletop_segmentation/table_z_filter_max" value="-0.01" /> -->
</launch>
